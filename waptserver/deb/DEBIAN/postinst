#!/usr/bin/python

import subprocess
import os
import shutil
import sys
import ConfigParser
import time


OLD_CFG_PATH = '/opt/wapt/waptserver/waptserver.ini'
NEW_CFG_PATH = '/opt/wapt/conf/waptserver.ini'


subprocess.check_output('systemctl enable  waptserver',shell=True)


print("Setting up pid and log files")
subprocess.check_output('touch /var/log/waptserver.log',shell=True)
subprocess.check_output('touch /var/run/waptserver.pid',shell=True)
subprocess.check_output('chown wapt:root /var/log/waptserver.log',shell=True)
subprocess.check_output('chown wapt:root /var/run/waptserver.pid',shell=True)


print("Cleaning up leftovers")
for cleanup_dir in ('rpm','mongodb','spool','uninstall_service.bat'):
    mypath = os.path.join('/opt/wapt/waptserver',cleanup_dir)
    if os.path.exists(mypath):
        shutil.rmtree(mypath)


def cleanup_ini_file():
    if not os.path.exists(OLD_CFG_PATH):
        return

    try:
        cfg = ConfigParser.RawConfigParser()
        cfg.read(OLD_CFG_PATH)
        if not cfg.has_option("uwsgi", "enable-threads"):
            cfg.set("uwsgi", "enable-threads", "true")
        if cfg.has_option("uwsgi","spooler"):
            cfg.remove_option('uwsgi','spooler')
        with open(OLD_CFG_PATH, 'wb') as out:
            cfg.write(out)
    except Exception:
        import traceback
        print("Error when amending" + OLD_CFG_PATH)
        traceback.print_exc()
        exit(0)

cleanup_ini_file()


if os.path.exists(OLD_CFG_PATH) and not os.path.islink(OLD_CFG_PATH):
    try:
        os.rename(OLD_CFG_PATH, NEW_CFG_PATH)
        os.symlink(NEW_CFG_PATH, OLD_CFG_PATH)
    except Exception:
        pass


print("Tightening up permissions")
subprocess.check_output('find /opt/wapt -type f -exec chmod 644 {} +',shell=True)
subprocess.check_output('find /opt/wapt -type f ! -name waptserver.ini -exec chown root:root {} +',shell=True)
subprocess.check_output('find /opt/wapt -type d ! -name conf ! -name log -exec chmod 755 {} +',shell=True)
subprocess.check_output('find /opt/wapt -type d ! -name conf ! -name log -exec chown root:root {} +',shell=True)
subprocess.check_output('chown -R wapt:root /opt/wapt/conf',shell=True)
subprocess.check_output('chmod 750 /opt/wapt/conf',shell=True)
subprocess.check_output('chown -R wapt:root /opt/wapt/log',shell=True)
subprocess.check_output('chmod 755 /opt/wapt/log',shell=True)
subprocess.check_output('chmod 755 /opt/wapt/waptserver/scripts/postconf.py', shell=True)
subprocess.check_output('mkdir -p /var/www/wapt/icons',shell=True)
subprocess.check_output('mkdir -p /var/www/wapt-host',shell=True)
subprocess.check_output('mkdir -p /var/www/wapt-hostref',shell=True)
subprocess.check_output('chown -R wapt:root /var/www/wapt',shell=True)
subprocess.check_output('chown -R wapt:root /var/www/wapt-host',shell=True)
subprocess.check_output('chown -R wapt:root /var/www/wapt-hostref',shell=True)

os.chmod('/opt/wapt/wapt-scanpackages.py',0o755)
os.chmod('/opt/wapt/wapt-signpackages.py',0o755)



print("Restarting rsyslog")
subprocess.check_output('systemctl restart rsyslog',shell=True)


def check_if_running(process_name):
    try:
        subprocess.check_output(['pgrep', '-f', process_name])
        return True
    except Exception:
        return False


# restart server if conf file is there and if it was already running
if os.path.exists('/opt/wapt/conf/waptserver.ini'):
    if check_if_running('waptserver'):
        print("Restarting server")
        subprocess.check_output('service waptserver stop',shell=True)
        time.sleep(2)
        # XXX temporary: clean up leftover waptserver processes
        # due to broken /etc/init.d/waptserver script
        try:
            subprocess.check_output("pkill -INT -f '^/usr/bin/uwsgi-core.*wapt'",shell=True)
        except subprocess.CalledProcessError as e:
            pass
    subprocess.check_output('service waptserver start',shell=True)
else:
    print(""" '\e[1;31m%-6s\e[m\n' "The installation of waptserver is finished!" """)
    print(""" '\e[1;31m%-6s\e[m\n' "For postconf please run: /usr/bin/python /opt/wapt/waptserver/scripts/postconf.py" """)
